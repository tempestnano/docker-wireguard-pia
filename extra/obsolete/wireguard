#!/bin/bash
# Script to create a split tunnel wireguard interface that will only tunnel a specific
# Docker network through wireguard. All other traffic will not be vpn'ed. The script will
# create a boot configuration so the interface comes back online after reboots.
# It also creates the routes so that WebGUIs are still accessible from the LAN and the
# vpn'ed containers can still reach other docker containers.
# Usage wireguard <up|down|status>
#
##########################################################################################
# Requirements:
# 1. Wireguard module installed on host. You can use this container to compile the module
#    in a docker container to avoid having to install gcc etc on the host IF YOU ARE USING
#    DEBIAN BUSTER. For any other distro choose your own method.
#    https://github.com/cmulk/wireguard-docker
#    Use the following docker command:
#    docker run -it --rm --cap-add sys_module -v /lib/modules:/lib/modules cmulk/wireguard-docker:buster install-module
#
# 2. Wireguard configuration in /etc/wireguard (DNS and Address need to be commented out)
#
# Sample wg0.conf file
#	[Interface]
#	PrivateKey = <key>
#	ListenPort = 51820
#	#DNS = 1.1.1.1             # Comment this line out if it's there
#	#Address = w.x.y.z/24      # Comment this line out if it's there
#
#	[Peer]
#	PublicKey = <key>
#	AllowedIPs = 0.0.0.0/0
#	Endpoint = a.b.c.d:443
#	PersistentKeepalive = 25
#
# 3. Resolvfconf package
#
# 4. Docker
##########################################################################################
# Instructions:
#
# Fill in the name of the docker network that needs to be vpn'ed (DOCKER_NET). If the docker network
# hasn't been created, the script will create the network with the given name and subnet
# 10.3.0.0/16.
#
# Fill in the name of the wireguard interface
#
# Run the script <wireguard up> and it will create the boot configuration in /etc/network/interfaces.d/<interface>.
# This will restore the interface and routes after a reboot.
#
# To bring the interface back down use <wireguard down>. This will delete the wireguard
# interface but keep the blackhole route, so that any running containers won't leak and
# use the host LAN interface to reach the internet.
#
# Create a docker compose file to use the docker network similar to this:
# transmission:
#    image: linuxserver/transmission
#    container_name: transmission
#    environment:
#      - PUID=1001
#      - PGID=1001
#      - TZ=America/New_York
#      - TRANSMISSION_WEB_HOME=/combustion-release/
#    volumes:
#      - /<volume>:/downloads:rw
#      - /<volume>:/watch:rw
#      - /<volume>:/config:rw
#      - /etc/localtime:/etc/localtime:ro
#    ports:
#      - 9091:9091
#      - 51413:51413
#      - 51413:51413/udp
#    restart: unless-stopped
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "5m"
#    networks:
#      - vpn
# networks:
#  vpn:
#    external:
#      name: docker-vpn0
##########################################################################################



## Set variables
# Name of the docker network to route through wireguard
# This network will be created if it does not exist using 10.30.0.0/16
DOCKER_NET_NAME="docker-vpn0"
# Name of wireguard interface to create
DEV_NAME="wg0"
##########################################################################################
# Nothing to edit below this line

tecreset=$(tput sgr0)
COL="12G"

set_ok () { echo -e  -n "\\033[0G[ \E[0;32m  OK  $tecreset ] "; }
set_failed () { echo -e  -n "\\033[0G[ \E[0;31mFAILED$tecreset ] "; }
echo_and_run () { echo -n -e "\\033[$COL$*" ; "$@" > /dev/null 2>&1; }

while_check () {
RETVAL=$?
while [ $RETVAL -ne 0 ]; do
        set_failed; echo_and_run $1
        echo $2
        RETVAL=$?
done
set_ok; echo -e "\\033[$COL$CMD"
}

if_check () {
CMD=$1
echo_and_run $1
CHECK=$2
RETVAL=$?
if [ $RETVAL -ne 0 ]; then
        set_failed; echo
        exit 1
fi
set_ok; echo
}

vpn_check () {
VPNIP=`docker run -ti --rm --net=$DOCKER_NET_NAME appropriate/curl https://api.ipify.org`
IP=`curl --silent https://api.ipify.org`
if [[ $VPNIP == *"Could not resolve host"*  ]]; then
	set_ok; echo "Not Connected to Endpoint: Blackhole active"
elif [[ $VPNIP == $ENDPOINT_IP ]]; then
	set_ok; echo "Connected to $ENDPOINT_IP"
elif [[ $VPNIP == $IP ]]; then
	set_failed; echo "Not Connected to Endpoint: Blackhole NOT active!"
fi
}

# check module is installed
MOD_CHECK=`lsmod | grep wire`
RETVAL=$?
if [ $RETVAL -ne 0 ]; then
        set_failed; echo -e "WireGuard Module Not Installed."
        exit 1
fi
set_ok; echo -e "\\033[$COL WireGuard Module Installed"

# check for conf file
if [ ! -f "/etc/wireguard/$DEV_NAME.conf" ]; then
	set_failed; echo -e "\\033[$COL/etc/wireguard/$DEV_NAME.conf"
	exit 1
fi
set_ok; echo -e "\\033[$COL/etc/wireguard/$DEV_NAME.conf"

# check for wireguard module


# Get IP addresses and subnets needed
DOCKER_NET=`docker network inspect $DOCKER_NET_NAME | grep Subnet | awk '{print $2}' | sed 's/[",]//g'`
INTERFACE_IP=`grep Address /etc/wireguard/$DEV_NAME.conf | awk '{print $3}' | cut -d/ -f1`
ENDPOINT_IP=`grep Endpoint /etc/wireguard/$DEV_NAME.conf | awk '{print $3}' | cut -d: -f1`
FILE="/etc/network/interfaces.d/$DEV_NAME"

up (){
# add wireguard interface
CMD="ip link add $DEV_NAME type wireguard"
CHECK=`ip addr | grep $DEV_NAME`
if_check "$CMD" "$CHECK"

# set wireguard conf
CMD="wg setconf $DEV_NAME /etc/wireguard/$DEV_NAME.conf"
CHECK=`wg showconf $DEV_NAME 2>/dev/null`
if_check "$CMD" "$CHECK"

# assign ip to wireguard interface
CMD="ip addr add $INTERFACE_IP dev $DEV_NAME"
CHECK=`ip addr | grep $INTERFACE_IP`
if_check "$CMD" "$CHECK"

# set sysctl
CMD="sysctl -w net.ipv4.conf.all.rp_filter=2"
set_ok; echo $CMD

# set mtu for wireguard interface
CMD="ip link set mtu 1420 up dev $DEV_NAME"
set_ok; echo_and_run $CMD

# bring wireguard interface up
CMD="ip link set up dev $DEV_NAME"
CHECK=`ip addr | grep $DEV_NAME | grep UP`
if_check "$CMD" "$CHECK"

# create docker network
CMD="docker network create $DOCKER_NET_NAME --subnet 10.30.0.0/16 -o "com.docker.network.driver.mtu"="1420""
CHECK=`docker network inspect $DOCKER_NET_NAME > /dev/null 2>&1`
while_check "$CMD" "$CHECK"

# add table 200
CMD="ip rule add from $DOCKER_NET table 200"
CHECK=`ip rule show | grep -w "lookup 200"`
while_check "$CMD" "$CHECK"

# add blackhole
CMD="ip route add blackhole default metric 3 table 200"
CHECK=`ip route show table 200 | grep -w "blackhole"`
while_check "$CMD" "$CHECK"

# add default route for table 200
CMD="ip route add default via $INTERFACE_IP metric 2 table 200"
CHECK=`ip route show table 200 | grep -w $INTERFACE_IP`
while_check "$CMD" "$CHECK"

# add local lan route
CMD="ip rule add table main suppress_prefixlength 0"
CHECK=`ip rule show | grep -w "suppress_prefixlength"`
while_check "$CMD" "$CHECK"

# check vpn ip
vpn_check
}

down (){
# del wireguard interface
CMD="ip link del $DEV_NAME"
CHECK=`ip addr | grep $DEV_NAME`
if_check "$CMD" "$CHECK"

# check table 200
CMD="ip rule add from $DOCKER_NET table 200"
CHECK=`ip rule show | grep -w "lookup 200"`
while_check "$CMD" "$CHECK"

# check blackhole
CMD="ip route add blackhole default metric 3 table 200"
CHECK=`ip route show table 200 | grep -w "blackhole"`
while_check "$CMD" "$CHECK"

# check to make sure blackhole is active
vpn_check
}

status(){
# check blackhole
CMD="ip route add blackhole default metric 3 table 200"
CHECK=`ip route show table 200 | grep -w "blackhole"`
while_check "$CMD" "$CHECK"

# check to make sure blackhole is active
vpn_check
}

# clean this up to prompt for overwrite
create(){
	#while [[ ! -f "$FILE" ]]; do
	#	set_failed; echo "Create Boot Config: /etc/network/interfaces.d/$DEV_NAME. Attempt to create ..."
		/bin/cat <<-EOM >$FILE
		auto $DEV_NAME
		iface $DEV_NAME inet manual
		pre-up ip route flush table 200
		pre-up ip rule add from $DOCKER_NET table 200
		pre-up ip rule add table main suppress_prefixlength 0
		pre-up ip route add blackhole default metric 3 table 200
		pre-up ip link add dev $DEV_NAME type wireguard
		pre-up wg setconf $DEV_NAME /etc/wireguard/$DEV_NAME.conf
		pre-up ip address add $INTERFACE_IP dev $DEV_NAME
		pre-up sysctl -w net.ipv4.conf.all.rp_filter=2
		pre-up ip link set mtu 1420 up dev $DEV_NAME
		ip link set up dev $DEV_NAME
		post-up /bin/bash -c "printf 'nameserver %s\n' '1.1.1.1' | resolvconf -a tun.$DEV_NAME -m 0 -x"
		post-up ip route add default via $INTERFACE_IP metric 2 table 200
		# del interface when network goes down
		post-down ip link del dev $DEV_NAME
		EOM
	#done
	/bin/cat $FILE
	echo "________________________________________________________________________________"
	set_ok; echo "Boot Config Created: /etc/network/interfaces.d/$DEV_NAME"
}

command="$1"
shift

case "$command" in
    up) up "$@" ;;
    down) down "$@" ;;
    create) create "$@" ;;
    status) status "$@" ;;
    *) echo "Usage: $0 up|down|create|status" >&2; exit 1 ;;
esac